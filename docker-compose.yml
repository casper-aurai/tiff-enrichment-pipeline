# This is the development Docker Compose file. For production, use docker-compose.prod.yml as an override.
version: '3.8'

services:
  # Main TIFF enrichment pipeline
  tiff-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Use the builder stage for development
      args:
        - ENVIRONMENT=development
    container_name: tiff-enrichment-pipeline
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://pipeline:${POSTGRES_PASSWORD}@postgres:5432/tiff_pipeline
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}  # Set to DEBUG for development
      - API_RATE_LIMIT=${API_RATE_LIMIT:-10}
      - PROCESSING_BATCH_SIZE=${PROCESSING_BATCH_SIZE:-5}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - PYTHONPATH=/app/src
      # Development specific settings
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEBUG=1
    volumes:
      - ./data/input:/data/input:ro
      - ./data/output:/data/output
      - ./data/failed:/data/failed
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./src:/app/src  # Mount source code for development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped
    networks:
      - pipeline-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python", "-c", "import rasterio; print('Rasterio version:', rasterio.__version__)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development tools
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        - ENVIRONMENT=development
    container_name: tiff-pipeline-dev-tools
    command: tail -f /dev/null  # Keep container running
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./config:/app/config
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app/src
    profiles:
      - dev

  # Development database
  postgres:
    image: postgres:15
    platform: linux/arm64/v8
    container_name: tiff-pipeline-db
    environment:
      - POSTGRES_DB=tiff_pipeline
      - POSTGRES_USER=pipeline
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/create-tables.sql:/docker-entrypoint-initdb.d/02-create-tables.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    restart: unless-stopped
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline -d tiff_pipeline"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Development cache
  redis:
    image: redis:7-alpine
    platform: linux/arm64/v8
    container_name: tiff-pipeline-cache
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tiff-pipeline-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - pipeline-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: tiff-pipeline-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - pipeline-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    name: tiff-enrichment-pipeline_postgres_data
  redis_data:
    name: tiff-enrichment-pipeline_redis_data
  prometheus_data:
    name: tiff-enrichment-pipeline_prometheus_data
  grafana_data:
    name: tiff-enrichment-pipeline_grafana_data

networks:
  pipeline-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16